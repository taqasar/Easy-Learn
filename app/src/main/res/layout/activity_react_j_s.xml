<?xml version="1.0" encoding="utf-8"?>
<androidx.drawerlayout.widget.DrawerLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ReactJS">


    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">


        <include layout="@layout/main_toolbar" />

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="43dp"
            android:orientation="horizontal">

            <ImageView
                android:id="@+id/freccia_dietro"
                android:layout_width="31dp"
                android:layout_height="31dp"
                android:layout_marginStart="20dp"
                android:layout_marginTop="10dp"
                android:contentDescription="TODO"
                android:src="@drawable/back_arrow" />


        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">

            <TextView
                android:id="@+id/textView7"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                android:layout_marginStart="10dp"
                android:layout_weight="1"
                android:fontFamily="@font/sf_ui_display_bold"
                android:text="ReactJS"
                android:textColor="#474747"
                android:textSize="30sp" />


        </LinearLayout>


        <ScrollView
            android:layout_width="match_parent"
            android:layout_height="524dp">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">




                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="React, la libreria dedicata al frontend"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="React è probabilmente la prima libreria JavaScript che nasce con una vocazione specifica: diventare la soluzione definitiva per sviluppatori frontend e app mobile basate su HTML5, la proverbiale “panacea per tutti i mali”, il tool che permetta di costruire interfacce utente dinamiche e sempre più complesse rimanendo comunque semplice e intuitivo da utilizzare.\n\nCreata da Facebook, React è la colonna portante del il social network più popolare del mondo e su di essa si basa l’interfaccia Web di Instagram.\n\nIn questa guida esaminiamo le caratteristiche peculiari di React, valutiamo i punti di forza della libreria e scopriamo come sfruttarla al meglio per creare interfacce utente, partendo dai principi basilari e approfondendo man mano la sua architettura per imparare a padroneggiarla a fondo e soddisfare le esigenze più avanzate.\n\nPer una rapida introduzione e per la configurazione dell'ambiente di lavoro consigliamo la visione del video seguente:\n "
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <androidx.constraintlayout.widget.ConstraintLayout
                    android:layout_width="match_parent"
                    android:layout_height="377dp"
                    android:orientation="horizontal">

                    <FrameLayout
                        android:id="@+id/frameLayout"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_weight="1"
                        app:layout_constraintBottom_toBottomOf="@+id/video_view"
                        app:layout_constraintLeft_toLeftOf="parent"
                        app:layout_constraintRight_toRightOf="parent"
                        app:layout_constraintTop_toTopOf="parent" />

                    <VideoView
                        android:id="@+id/video_view"
                        android:layout_width="415dp"
                        android:layout_height="383dp"
                        app:layout_constraintBottom_toBottomOf="parent"
                        app:layout_constraintEnd_toEndOf="parent"
                        app:layout_constraintHorizontal_bias="0.461"
                        app:layout_constraintStart_toStartOf="@+id/frameLayout"
                        app:layout_constraintTop_toTopOf="parent"
                        app:layout_constraintVertical_bias="0.4"
                        tools:ignore="MissingConstraints" />


                </androidx.constraintlayout.widget.ConstraintLayout>




                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Componenti React"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Ciascun componente React si fa carico di gestire una porzione specifica dell’interfaccia utente in un’applicazione.\n\nPrendiamo come esempio la pagina di Facebook: in essa sono presenti decine e decine di componenti (si stima che Facebook ne abbia creati complessivamente più di 15.000!); la sezione delle notizie è una di questi, che al suo interno contiene “componenti figli” per rappresentare la singola notizia, e scendendo ancora in profondità troviamo il contenitore dei commenti, poi il singolo commento, il tasto “Mi piace”per il commento e così via, fino ad arrivare al componente che rappresenta la più piccola unità rappresentabile e gestibile individualmente nella pagina.\n\nÈ utile sottolineare che è frequente la pratica di creare componenti che svolgano il ruolo di “raggruppamento logico” o di semplice assemblaggio di altri componenti figli che vengono così pilotati dal proprio contenitore.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Ruolo dei componenti"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="\Ciascun componente quindi assume un ruolo ben specifico dal punto di vista di ciò che rappresenta graficamente e si fa carico di gestire le interazioni dell’utente su quella particolare sezione di interfaccia, andando a modificare lo stato del componente stesso, se previsto, o segnalando l’evento ai componenti che lo contengono affinché React aggiorni il Virtual DOM della pagina e, di conseguenza, il DOM reale del browser modificando la struttura della pagina.\n\nIn estrema sintesi, i componenti React sono i “mattoncini” fondamentali che ci consentono di passare da una pagina statica a un’applicazione Web dinamica la cui interfaccia è in grado di rispondere agli eventi che si verificano nella pagina, ossia reagire (react) e aggiornare se stessa di conseguenza.\n\nQuando si parla di eventi, non ci si riferisce solamente alle azioni eseguite dall’utente, ma anche ad altri “agenti”, ad esempio la ricezione asincrona di dati dal server, la scadenza di un timeout associato a un callback e così via, in breve tutto ciò che accade nel browser e che deve essere rappresentato in qualche modo nella pagina.\n\nCome ulteriore esempio, prendiamo un’immagine pubblicata nel sito ufficiale di React, che mostra una semplice interfaccia di ricerca prodotti suddivisi per categorie; i riquadri evidenziati con colori differenti rappresentano i componenti che costituiscono l’interfaccia:\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView6"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/react_01" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Ciclo di vita dei componenti"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="I componenti giocano un ruolo centrale nello sviluppo di applicazioni con React perché è grazie alle combinazioni tra componenti che possiamo costruire le interfacce utente, a partire dalle parti più piccole fino ad arrivare alla pagina completa.\n\nIl metodo render() ha la responsabilità di restituire gli elementi che rappresentano graficamente il componente utilizzando le funzioni della libreria React, direttamente o indirettamente (tramite la sintassi JSX). React, nella fase di rendering, dovrà “montare” tali elementi del Virtual DOM nella pagina modificando gli oggetti del DOM reale.\n\nIn questa lezione approfondiremo il ciclo di vita dei componenti React e i metodi da implementare al suo interno per gestirne le fasi. Lo faremo realizzando anche stavolta un componente di esempio.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Scheletro iniziale del componente"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Supponiamo di voler creare un componente che rappresenti un cronometro. L’interfaccia del componente includerà un pulsante per azzerare il conteggio e un etichetta che mostra il tempo trascorso (espresso in secondi) in grassetto.\n\nIl primo passo da compiere consiste nella definizione dello scheletro del componente, creando l’oggetto che lo rappresenta e inserendo la funzione render() che ne gestisce il rendering\n\nl metodo render() restituisce un elemento div che funge da contenitore e ospita al suo interno il pulsante per il reset del cronometro, una semplice icona a forma di orologio e il contatore del tempo trascorso, creati usando la sintassi JSX che sarà automaticamente trasformata dal “transpiler” in chiamate alla funzione React.createElement().\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>



                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Inizializzazione e modifica dello stato"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="È responsabilità dello sviluppatore fornire a React l’oggetto che rappresenta lo stato iniziale del componente, implementando la funzione getInitialState(). Per questo la aggiungiamo alla nostra implementazione.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />screen


                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView15"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/react_02" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="L’oggetto restituito rappresenta lo stato iniziale accessibile tramite state, che è l’identificatore con cui possiamo accedere all’oggetto che rappresenta lo stato e leggerne i valori, oppure modificarli.\n\nQuando viene premuto il pulsante di reset, ad esempio, dovremo riportare il valore di state.counter a zero per far ripartire il conteggio. React si accorgerà della modifica e aggiornerà la pagina per mostrare il nuovo valore.\n\nLa funzione resetCounter() può essere vista come un “metodo privato” del componente e può essere affiancata alle funzioni già analizzate. Possiamo aggiungere quante funzioni private vogliamo per incapsulare logica di business o di gestione degli eventi, ed esse non disturberanno React fino a quando il nome attribuito loro non coincide con uno di quelli “riservati” dalla libreria alla gestione del ciclo di vita del componente.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView16"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/react_03" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="React consente di intercettare il momento in cui un componente viene “montato” nella pagina, ossia quando la libreria ha provveduto a materializzare concretamente gli elementi del componente all’interno nella pagina, creando gli oggetti del DOM reale a partire dagli elementi restituiti da render() e basati sullo stato iniziale.\n\nQuando il montaggio è completo, possiamo stare certi che l’interfaccia è presente nella pagina e possiamo quindi procedere con le operazioni che consentono di modificarla a fronte della variazione dello stato del componente.\n\nAnalogamente, la fase di “smontaggio” avviene quando, in base alla business logic, alle proprietà e allo stato dei componenti dell’interfaccia utente, gli oggetti del DOM vengono rimossi dalla pagina.\n\nReact ci consente di inserire due funzioni nel componente che verranno richiamate nelle fasi appena citate:\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView13"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/react_04" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Si tratta di funzioni che rivestono un ruolo importante: sono i punti strategici in cui è possibile inizializzare (e finalizzare) eventuali oggetti dell’ambiente di runtime, o di altre librerie, per integrarle con il nostro componente.\n\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView14"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/react_05" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Menu di navigazione"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Vedremo ora come è possibile estendere il codice dell’esempio aggiungendo un tradizionale menu di navigazione, ovvero dando la possibilità all’utente di poter accedere alla vista desiderata selezionando la voce relativa all’interno del menu, senza doverne digitare manualmente il nome nell’URL.\n\nPer dare corpo al nostro menu di navigazione, dobbiamo creare tanti collegamenti (link) quante sono le viste che vogliamo rendere accessibili.\n\nAll’interno del medesimo BrowserRoute possiamo aggiungere il componente Link per visualizzare il collegamento che ci porta a una vista.\n\nabbiamo aggiunto Link all’istruzione che importa i componenti dal package react-router-dom, analogamente a quanto già fatto per BrowserRouter e Route.\n\nuccessivamente, abbiamo inserito il componente Link all’interno del BrowserRouter specificando il percorso della vista nell’attributo to e inserendo il testo da visualizzare per il link come contenuto dell’elemento\n\nSe tutto è andato come previsto, nella pagina appariranno i link che consentono di navigare tramite click nelle viste corrispondenti ai percorsi associati.\n\nOra abbiamo un menu di navigazione, certo, ma salterà subito all’occhio quanto sia rudimentale e soprattutto formattato male; ad esempio, non è presente nemmeno uno spazio tra i link del menu, poiché il ritorno a capo che separa le due istanze del componente Link non è significativo per la sintassi JSX.\n\n\nGrazie dell'attenzione.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>



                <androidx.constraintlayout.widget.ConstraintLayout
                    android:layout_width="match_parent"
                    android:layout_height="151dp"
                    android:layout_weight="1"
                    android:orientation="vertical">


                    <Button
                        android:id="@+id/button_quiz"
                        android:layout_width="200dp"
                        android:layout_height="40dp"
                        android:background="@drawable/button_bkg"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Tenta il quiz"
                        android:textAlignment="center"
                        android:textAllCaps="false"
                        android:textColor="#FFFFFF"
                        android:textSize="20sp"
                        app:layout_constraintBottom_toBottomOf="parent"
                        app:layout_constraintEnd_toEndOf="parent"
                        app:layout_constraintStart_toStartOf="parent"
                        app:layout_constraintTop_toTopOf="parent"
                        app:layout_constraintVertical_bias="0.01999998" />

                    <Button
                        android:id="@+id/button_home"
                        android:layout_width="200dp"
                        android:layout_height="40dp"
                        android:layout_marginTop="50dp"
                        android:layout_marginBottom="30dp"
                        android:background="@drawable/button_bkg"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Torna alla pagina iniziale"
                        android:textAlignment="center"
                        android:textAllCaps="false"
                        android:textColor="#FFFFFF"
                        android:textSize="17sp"
                        app:layout_constraintBottom_toBottomOf="parent"
                        app:layout_constraintEnd_toEndOf="parent"
                        app:layout_constraintStart_toStartOf="parent"
                        app:layout_constraintTop_toTopOf="parent"
                        app:layout_constraintVertical_bias="0.85" />
                </androidx.constraintlayout.widget.ConstraintLayout>


            </LinearLayout>
        </ScrollView>

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent">

            <com.google.android.material.bottomnavigation.BottomNavigationView
                android:id="@+id/bottom_navigation"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_alignParentBottom="true"
                android:background="#ffff"
                app:itemIconTint="@drawable/selector"
                app:itemTextColor="@drawable/selector"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="1.0"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintVertical_bias="1.0"
                app:menu="@menu/menu_navigation" />

        </androidx.constraintlayout.widget.ConstraintLayout>


    </LinearLayout>

    <RelativeLayout
        android:layout_width="300dp"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        android:background="@android:color/white">

        <include
            layout="@layout/main_nav_drawer"/>


    </RelativeLayout>


</androidx.drawerlayout.widget.DrawerLayout>

