<?xml version="1.0" encoding="utf-8"?>
<androidx.drawerlayout.widget.DrawerLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".NodeJS">


    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">


        <include
            layout="@layout/main_toolbar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content" />

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="43dp"
            android:orientation="horizontal">

            <ImageView
                android:id="@+id/freccia_dietro"
                android:layout_width="31dp"
                android:layout_height="31dp"
                android:layout_marginStart="20dp"
                android:layout_marginTop="10dp"
                android:contentDescription="TODO"
                android:src="@drawable/back_arrow" />


        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">

            <TextView
                android:id="@+id/textView7"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                android:layout_marginStart="10dp"
                android:layout_weight="1"
                android:fontFamily="@font/sf_ui_display_bold"
                android:text="Node JS"
                android:textColor="#474747"
                android:textSize="30sp" />


        </LinearLayout>


        <ScrollView
            android:layout_width="match_parent"
            android:layout_height="524dp">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">


                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Introduzione"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>



                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="0"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Node.js è un framework per realizzare applicazioni Web in JavaScript, permettendoci di utilizzare questo linguaggio, tipicamente utilizzato nella “client-side”, anche per la scrittura di applicazioni “server-side”.\n\nLa piattaforma è basata sul JavaScript Engine V8, che è il runtime di Google utilizzato anche da Chrome e disponibile sulle principali piattaforme, anche se maggiormente performante su sistemi operativi UNIX-like.\n\nPer una rapida introduzione rimandiamo il lettore alla visione del breve video seguente:\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <androidx.constraintlayout.widget.ConstraintLayout
                    android:layout_width="match_parent"
                    android:layout_height="377dp"
                    android:orientation="horizontal">

                    <FrameLayout
                        android:id="@+id/frameLayout"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_weight="1"
                        app:layout_constraintBottom_toBottomOf="@+id/video_view"
                        app:layout_constraintLeft_toLeftOf="parent"
                        app:layout_constraintRight_toRightOf="parent"
                        app:layout_constraintTop_toTopOf="parent" />

                    <VideoView
                        android:id="@+id/video_view"
                        android:layout_width="415dp"
                        android:layout_height="383dp"
                        app:layout_constraintBottom_toBottomOf="parent"
                        app:layout_constraintEnd_toEndOf="parent"
                        app:layout_constraintHorizontal_bias="0.461"
                        app:layout_constraintStart_toStartOf="@+id/frameLayout"
                        app:layout_constraintTop_toTopOf="parent"
                        app:layout_constraintVertical_bias="0.4"
                        tools:ignore="MissingConstraints" />


                </androidx.constraintlayout.widget.ConstraintLayout>




                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="I moduli"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />

                </LinearLayout>




                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Il modulo globals è un modulo atipico in quanto non rappresenta una vera e propria libreria ma una serie di API incluse nel namespace globale dell’applicazione e quindi richiamabili direttamente.\n\nTra le funzioni di questo pseudo-modulo occorre ricordare:\n\n◘ require che permette di includere moduli aggiuntivi\n\n◘ setTimeout e setInterval per lavorare con i timer\n\nOltre alle funzioni sono presenti alcuni oggetti fondamentali come console che permette di accedere allo standard input e allo standard error del processo e variabili come __filename e __dirname valorizzate a runtime rispettivamente con il nome del filename avviato e con il nome della cartella corrente.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Utilizzare i moduli nelle app Node.js e richiamarne i metodi"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Una volta analizzati i principali moduli disponibili in NodeJS, possiamo includere quelli necessari alla nostra applicazione semplicemente grazie alla funzione globale require. La funzione ritorna un riferimento al modulo esponendone tutte le funzionalità sotto forma di metodi.\n\nPrendiamo come riferimento il modulo url, esso espone tre metodi: url.parse, url.format e url.resolve. Per utilizzarli è sufficiente includere il modulo e richiamarne i metodi.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView9"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/node01" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Se è necessario effettuare una singola chiamata ad un modulo possiamo invocare la funzione direttamente senza assegnarno ad una variabile locale.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Applicazioni Web"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Come abbiamo visto in precedenza un modulo non è nient’altro che un file contenente del codice JavaScript che espone le sue funzionalità attraverso l’oggetto nativo module.exports. In questo file creeremo la classe HttpDispatcher e ne esporremo una sua istanza, dato che l’oggetto segue il pattern singleton. Lo sviluppo seguirà un flusso incrementale, quindi aggiungeremo passo passo le varie funzionalità.\n\nPrima di analizzare il codice del modulo soffermiamoci su quello che sarà il risultato finale che nostra applicazione dovrà raggiungere dopo averlo implementato.\n\nIl codice è piuttosto intuitivo da leggere: abbiamo creato due listeners in ascolto rispettivamente all’url /page1 invocato dal metodo GET e all’url /page2 invocato dal metodo POST. Entrambi i listeners risponderanno con un testo semplice in quanto non è argomento di questa lezione concentrarsi sul contenuto ma bensì sull’instradamento delle varie richieste.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView8"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/node02" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Una volta compreso quale deve essere il nostro risultato passiamo alla scrittura del modulo vero e proprio.\n\nIl dispatcher (che ricordiamoci sarà sempre uno per applicazione) avrà tra le sue proprietà una lista di listeners organizzati per metodo HTTP (in questo caso solamente i metodi più comuni GET e POST) che rappresenteranno le diverse callback definite dall’utente. Oltre a queste proprietà, che risulteranno di fatto private, definiamo le funzioni per andare a definire nuovi listeners.\n\nOna volta popolata la proprietà listeners dobbiamo occuparci di differenziare effettivamente la chiamata all’interno del metodo dispatch (che viene invocato direttamente dall’applicazione).\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView32"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/node03" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Modello di comunicazione long-polling"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Come sottolineato più volte in questa guida, la caratteristica fondamentale del framework basato su V8 è il concetto di chiamate non bloccanti che agiscono in modo asincrono rispetto al flusso principale dell’applicazione. Questo aspetto, oltre a garantire una maggior leggerezza dell’applicazione permette di realizzare applicativi web basati sul paradigma Comet.\n\nComet è un modello architetturale di applicativi web che si focalizza sui cosidetti eventi server-side.\n\nLe applicazioni standard alle quali siamo abituati funzionano in una maniera molto semplice: il client richiede una risorsa, il server elabora una risposta sulla base di eventuali dati ricevuti dal client e la invia al server chiudendo di fatto la transazione. Questo concetto basilare viene arricchito da aspetti di “sessione” che permettono di identificare il client durante le diverse chiamate (spesso grazie ai cookie) ma il flusso dei dati rimane banalmente lo stesso.\n\nComet è un modello architetturale che viene concretizzato tramite diverse tecniche che negli anni si sono perfezionate soprattutto grazie al progresso tecnologico che ha spinto i browser a diventare sempre più ricchi e performanti.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>




                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="XMLHttpRequest Long-Polling"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="La tecnologia che però ha preso maggior piede tra quelle che implementano Comet è la cosiddetta XMLHttpRequest Long-Polling. Cerchiamo di capire meglio il suo funzionamento dato che dovremmo reimplementarlo.\n\nInnanzitutto la parola XMLHttpRequest ci fa subito capire che le chiamate vengono effettuate come se fossero delle banali chiamate Ajax e infatti è così. Il concetto invece di Long-Polling invece rappresenta la verà novità che rende possibile la gestione di eventi server-side.\n\nIl client appena avviata l’applicazione effettua una chiamata verso il server. Il server, dato che non ha ancora eventi da comunicare al client, mantiene aperta la connessione e la imposta in uno stato “pending” in attesa che succeda qualcosa. Nel momento in cui scatta un evento (per esempio un altro utente invia un messaggio) il server può rispondere immediatamente al client precedente dato che possiedeva già una sua richiesta disponibile. Il client appena ricevuta la risposta, oltre a dare feedback all’utente, ricontatterà il server per eventuali altri eventi futuri.\n\nEcco uno schema che può aiutare nella comprensione:\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView33"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/node04" />
                </LinearLayout>



                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Debug di applicazioni Node.js"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Lo sviluppo di applicazioni complesse richiede senza dubbio la presenza di uno strumento fondamentale: il debugger. Per debugging si intende una serie di attività tra cui: controllare lo stato della nostra applicazione in qualsiasi momento, valutare le nostre variabili, controllare che il flusso stia prendendo la strada corretta.\n\nLo strumento probabilmente più usato per JavaScript è Firebug che ha introdotto ufficiosamente il debugging in un linguaggio multiedrico come JavaScript. Prima eravamo costretti ad utilizzare tonnellate di chiamate a alert.\n\nPer debuggare una applicazione Node.js abbiamo, al momento, due tool:\n\n◘ il debugger a linea di comando presente nativamente in Node.js\n\n◘ node-inspector\n\nLe due immagini seguenti mostrano i due debugger in azione:\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView15"
                        android:layout_width="387dp"
                        android:layout_height="340dp"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/node05" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView34"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/node06" />
                </LinearLayout>



                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="La versione attuale di Node.js (la 0.8.8) include un tool per il debug avviabile da linea di comando. Anche le versioni precedenti di Node.js lo offrivano anche se le API erano leggermente diverse.\n\nnode-inspector è un plugin che permette di accedere al debugger di Node.js in una maniera più intuitiva e comoda, sfruttando il debugger già presente all’interno di un qualsiasi browser basato su WebKit. Essendo un plugin che aggiunge un nuovo comando alla macchina dobbiamo installarlo in modalità globale, quindi con permessi di amministratore e con il parametro -g .\n\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>





                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Confronto finale tra i debbuger"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="La differenza tra i due debugger sta nella GUI, che rende node-inspector più semplice da usare. Tuttavia non sempre è possibile usare node-inspector soprattutto in ambienti di produzione dove non è possibile installare nuovi applicativi, avere accesso ad interfacce testuali o aprire ulteriori porte TCP verso l’esterno. L’ideale è quindi sfruttare node-inspector durante il processo di sviluppo, ma non escludere completamente il debugger interno perchè potrà sempre tornare utile.\n\n\nGrazie per l'attenzione.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>



                <androidx.constraintlayout.widget.ConstraintLayout
                    android:layout_width="match_parent"
                    android:layout_height="151dp"
                    android:layout_weight="1"
                    android:orientation="vertical">


                    <Button
                        android:id="@+id/button_quiz"
                        android:layout_width="200dp"
                        android:layout_height="40dp"
                        android:background="@drawable/button_bkg"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Tenta il quiz"
                        android:textAlignment="center"
                        android:textAllCaps="false"
                        android:textColor="#FFFFFF"
                        android:textSize="20sp"
                        app:layout_constraintBottom_toBottomOf="parent"
                        app:layout_constraintEnd_toEndOf="parent"
                        app:layout_constraintStart_toStartOf="parent"
                        app:layout_constraintTop_toTopOf="parent"
                        app:layout_constraintVertical_bias="0.01999998" />

                    <Button
                        android:id="@+id/button_home"
                        android:layout_width="200dp"
                        android:layout_height="60dp"
                        android:layout_marginTop="50dp"
                        android:layout_marginBottom="30dp"
                        android:background="@drawable/button_bkg"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Torna alla pagina iniziale"
                        android:textAlignment="center"
                        android:textAllCaps="false"
                        android:textColor="#FFFFFF"
                        android:textSize="20sp"
                        app:layout_constraintBottom_toBottomOf="parent"
                        app:layout_constraintEnd_toEndOf="parent"
                        app:layout_constraintStart_toStartOf="parent"
                        app:layout_constraintTop_toTopOf="parent"
                        app:layout_constraintVertical_bias="0.85" />
                </androidx.constraintlayout.widget.ConstraintLayout>


            </LinearLayout>
        </ScrollView>

        <com.google.android.material.bottomnavigation.BottomNavigationView
            android:id="@+id/bottom_navigation"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#ffff"
            app:itemIconTint="@drawable/selector"
            app:itemTextColor="@drawable/selector"
            app:menu="@menu/menu_navigation" />


    </LinearLayout>

    <RelativeLayout
        android:layout_width="300dp"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        android:background="@android:color/white">

        <include layout="@layout/main_nav_drawer" />


    </RelativeLayout>


</androidx.drawerlayout.widget.DrawerLayout>

