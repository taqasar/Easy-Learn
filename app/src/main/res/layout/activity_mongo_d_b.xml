<?xml version="1.0" encoding="utf-8"?>
<androidx.drawerlayout.widget.DrawerLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MongoDB">


    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">


        <include
            layout="@layout/main_toolbar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content" />

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="43dp"
            android:orientation="horizontal">

            <ImageView
                android:id="@+id/freccia_dietro"
                android:layout_width="31dp"
                android:layout_height="31dp"
                android:layout_marginStart="20dp"
                android:layout_marginTop="10dp"
                android:contentDescription="TODO"
                android:src="@drawable/back_arrow" />


        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">

            <TextView
                android:id="@+id/textView7"
                android:layout_width="0dp"
                android:layout_height="match_parent"
                android:layout_marginStart="10dp"
                android:layout_weight="1"
                android:fontFamily="@font/sf_ui_display_bold"
                android:text="Mongo DB "
                android:textColor="#474747"
                android:textSize="30sp" />


        </LinearLayout>


        <ScrollView
            android:layout_width="match_parent"
            android:layout_height="524dp">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">


                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Introduzione"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="0"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="MongoDB è un database NoSQL orientato ai documenti, che nasce nel 2007 in California come servizio da utilizzare nell’ambito di un progetto più ampio, ma che presto è diventato un prodotto indipendente ed open-source. Esso memorizza i documenti in JSON, formato basato su JavaScript e più semplice di XML, ma comunque dotato di una buona espressività.\n\nIn questa guida analizzeremo le principali caratteristiche di MongoDB, partendo dalle basi e passando poi alla sintassi ed alle sue caratteristiche fondamentali. Prima però, è bene capire cosa significa avere a che fare con un database NoSQL, e qual è la differenza tra questa categoria di basi di dati, ed i più tradizionali database SQL\n\nSQL è l’acronimo di Structured Query Language, il linguaggio di programmazione usato per l’interrogazione e la gestione dei database relazionali (RDBMS), quelli cioè che utilizzano il modello logico basato su tabelle e relazioni. Per questo motivo, spesso i due termini database relazionali e database SQL, vengono usati come sinonimi.\n\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView4"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/mongo_01" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="NoSQL non è uno specifico linguaggio, ma è il termine universalmente accettato per raggruppare un insieme di tecnologie per la persistenza dei dati che funzionano in modo sostanzialmente diverso dai database relazionali, quindi che non rispettino una o alcune delle caratteristiche indicate sopra.\n\nQuesto significa che i database NoSQL possono avere le caratteristiche più disparate: alcuni non utilizzano il modello relazionale, altri usano tabelle e campi ma senza schemi fissi, alcuni non permettono vincoli di integrità referenziale, e altri ancora non garantiscono transazioni ACID. E naturalmente ci possono essere varianti che combinano le precedenti.\n\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Vantaggi e svantaggi"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Non è facile valutare vantaggi e svantaggi dei database NoSQL rispetto ai RDBMS, appunto perché ogni database NoSQL merita un discorso a parte. Tuttavia si possono individuare alcune caratteristiche comuni\n\nIn primis, poiché il database NoSQL viene scelto in base al contesto dell’applicazione che implementiamo, generalmente esso è più vicino al modello dei dati dell’applicazione. Ad esempio, se implementiamo un’applicazione che gestirà molte relazioni tra oggetti di vario tipo, un modello logico di dati come quello a grafi può rendere l’applicazione molto più semplice da sviluppare.\n\nUn noto problema di quando si sviluppa con linguaggi orientati ad oggetti è, infatti, il cosiddetto O/R impedance mismatch, ossia il fatto che i due modelli, relazionale e ad oggetti, sono molto diversi tra loro. Ciò può dar luogo a problematiche che vanno dalla gestione del polimorfismo alla conversione dei tipi di dati, che generalmente vengono lasciate in carico ad un ORM.\n\nTra gli svantaggi più significativi dei database NoSQL possiamo riportare la carenza di tool: per una tecnologia consolidata da molto tempo come SQL, esistono tantissimi strumenti di gestione e sviluppo, a differenza di quanto accade per la maggior parte dei database NoSQL.\n\nCome già detto, MongoDB è un database orientato ai documenti, ognuno dei quali è memorizzato nel formato JSON. Il documento è fondamentalmente un albero che può contenere molti dati, anche annidati. Un primo esempio è il seguente:\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView5"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/mongo_02" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Inserimento di documenti nel database"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Dopo aver avviato il nostro server MongoDB (mongod) e la shell (mongo), possiamo utilizzare quest’ultima per interagire attivamente con il nostro database. Come abbiamo già visto, MongoDB memorizza i documenti in collezioni (collection). Non dobbiamo pensare alle collezioni come se fossero tabelle di un database relazionale: infatti, i documenti di una stessa collezione potrebbero avere strutture diverse, nonostante essi condividano gli stessi indici.\n\nUn database, invece, è un insieme di collezioni che corrisponde ad un insieme di file nel disco fisso. Un’istanza di MongoDB può gestire più database. Di seguito mostreremo brevemente come utilizzare la shell per effettuare le operazioni CRUD (Create, Read, Update, Delete).\n\nDopo aver aperto la shell, selezionamo il database da usare.\n\nMongoDB risponderà con il messaggio switched to db html_it. In realtà non abbiamo ancora creato alcun database con nome html_it; esso verrà generato al momento del suo primo effettivo utilizzo. Su MongoDB, infatti, non esiste alcun comando esplicito per creare un database. Possiamo però sapere quali database sono stati effettivamente creati, utilizzando il comando code show databases code.\n\nAnche le collezioni vengono create implicitamente al primo utilizzo, quindi non è necessario farlo con un comando specifico. È sufficiente passare direttamente alla creazione di un documento.\n\nA questo punto avremo una nuova collezione (websites), contenente un solo documento avente tre campi: name, url e un campo a valori multipli: tags. Per verificarlo possiamo usare innanzitutto il comando show collections, che ci elencherà le collezioni presenti nel database corrente. Quindi, per interrogare tutti i documenti presenti nella collezione, digitiamo quanto segue:\n\ndb.website.find()\n\nDeduciamo che MongoDB ha aggiunto un nuovo campo al nostro documento, chiamato _id. Questo campo identifica univocamente ogni documento ed è obbligatorio, oltre ad essere unico nell’intera collezione. Se non assegniamo noi un valore a _id (come abbiamo fatto in questo caso), MongoDB genera un ObjectId e lo assegna. Un ObjectId è un numero pseudocasuale che ha un tasso di collisione infinitesimo (è cioè molto difficile generarne due uguali). Si noti anche che la sintassi di ObjectId non rientra nello standard JSON. Ciò perché in realtà MongoDB usa una sua estensione, chiamata BSON (Binary JSON).\n\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView9"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/mongo_03" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="L’aggiornamento dei documenti avviene tramite il metodo update.\n\nQuesto comando modificherà i documenti che hanno il campo name impostato a homepage. Il server risponderà con un documento che indica quanti documenti sono stati modificati. Il primo parametro (come nel metodo find) indica i criteri di selezione degli elementi modificati. Il parametro multi indica che potranno essere aggiornati anche più di un documento; senza specificare quest’ultima opzione, di default MongoDB ne aggiornerà solamente uno.\n\nL’eliminazione di un documento dalla collezione viene effettuata per mezzo del metodo remove. \n\nIl server restituisce un documento che indica quanti documenti sono stati eliminati. Un caso particolare è quello relativo all’eliminazione di tutti i documenti della collezione; in questo caso bisogna che il primo parametro sia specificato, e coincida esplicitamente con un documento vuoto.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Estrazione di dati: find"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Il metodo find accetta in ingresso due parametri, entrambi opzionali: i criteri di filtraggio e le specifiche di proiezione. Tramite il primo si stabilisce quali documenti cercare, con il secondo invece quali campi dei documenti trovati devono o non devono essere restituiti. Per essere precisi, find non restituisce un elenco di documenti ma un cursore, ossia un puntatore ad un elenco che deve essere iterato per ottenere i documenti veri e propri. La console di mongo si occupa per noi di iterare il cursore e mostrare a video i risultati. Usando i driver, invece, è responsabilità nostra iterare il cursore nel modo specifico per il driver ed il linguaggio usato.\n\non specificare i criteri di filtraggio comporta la restituzione di tutti i documenti (nessun filtraggio), mentre non specificando la proiezione si ottengono i documenti interi. Come abbiamo già visto, infatti, per ottenere tutti i documenti (con tutti i relativi campi) di una collezione, possiamo invocare la funzione senza parametri:\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView8"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/mongo_04" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Diversi esempi di filtraggio e ricerche"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Il filtraggio più semplice è quello per uguaglianza: cerchiamo documenti che abbiano esattamente un dato valore in un certo campo.\n\nLa ricerca può essere fatta anche all’interno dei documenti incorporati.\n\nLa ricerca può essere fatta anche all’interno dei documenti incorporati.\n\nUn altro tipo di filtraggio applicabile utilizza gli operatori forniti da MongoDB per la ricerca. Sul sito ufficiale si può accedere alla guida di riferimento di tutti gli operatori.\n\nI filtri si possono combinare usando gli operatori logici: $and, $or, $not e $nor\n\nTutti i filtri che abbiamo visto finora si basano sul valore dei campi. Se un documento non ha il campo indicato nel filtro, esso non verrà preso in considerazione e quindi non verrà restituito come risultato di find.\n\nUn modo di filtrare documenti basandosi su testo è usare le regular expression. Per esempio, la seguente query cerca la parola nosql nel campo title dei documenti:\n\n  $> db.books.find(  { title: { $regex: /nosql/i } }  )\n\nSpesso i documenti memorizzati in MongoDB sono molto più grandi di quelli che vediamo nei nostri esempi, e spesso contengono molti array e documenti incorporati. Richiedere interi documenti per mezzo di find significa far viaggiare molti dati (spesso non necessari) sulla rete. Per questo è possibile effettuare una proiezione dei documenti, ossia selezionare solo alcuni campi.\n\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>



                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView6"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        app:srcCompat="@drawable/mongo_05" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Ricerche geografiche"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="A titolo esemplificativo, un’applicazione potrebbe mostrare all’utente la distanza del ristorante più vicino. Per fare ciò, essa dovrebbe memorizzare la posizione di tutti i ristoranti (se non quelli di tutto il mondo, almeno quelli della regione geografica dei propri utenti). MongoDB permette due tipi di strutture dati per i dati geografici:\n\n1) Il formato GeoJSON\n\n2) Coordinate bidimensionali, utilizzando coppie di coordinate [x,y]\n\nL’operatore $near seleziona e ordina in ordine crescente di distanza gli oggetti della collezione più vicini al punto specificato. Si tratta dunque di un operatore molto potente, che innanzitutto ci toglie la necessità di implementare algoritmi di calcolo delle distanze su superfici sferiche, e poi che, grazie all’indicizzazione, ottimizza anche la quantità di oggetti della collezione che devono essere analizzati.\n\nUn altro operatore supportato è l’operatore di inclusione, $geoWithin. Questo operatore permette di selezionare gli oggetti che si trovano entro un certo poligono.\n\n Se la nostra collezione, anziché punti (type:  Point) contiene dei poligoni (type: Polygon) nel campo posizione, verranno considerati solamente i poligoni che stanno interamente nel poligono specificato nella query. Specificando l’operatore di intersezione $geoIntersect al posto di $geoWithin nel codice precedente, si ottengono invece i poligoni che hanno un’intersezione non vuota con il poligono usato nella query.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>




                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Memorizzare documenti e file multimediali"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="La memorizzazione di file in un database può essere di importanza cruciale in certi tipi di applicazioni. Si pensi ad esempio ad uno negozio online di musica, il cui database potrebbe contenere file musicali, oppure ad un social network che permetta di pubblicare video, da riprodurre in streaming.\n\nGridFS è un sistema realizzato per memorizzare file di grandi dimensioni dentro MongoDB. Quando si memorizza un file tramite GridFS, MongoDB lo suddivide in parti non più grandi di 255K, dette chunk, e li memorizza in una collezione denominata chunks; contemporaneamente, inserisce nella collezione files i metadati del singolo file.\n\ntilizzare GridFS senza utilizzare un driver (per un’introduzione ai driver di MongoDB, si veda l’apposita lezione di questa guida), MongoDB fornisce lo strumento mongofiles. Si tratta di un programma a riga di comando che permette di interagire direttamente con un’istanza di MongoDB per archiviare, cercare ed eliminare file da GridFS. Vediamo subito un esempio.\n\nVediamo come si può caricare un file utilizzando l’API Java per GridFS. Inseriamo nei commenti la spiegazione dei vari passi:\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView15"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/mongo_06" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Un fatto interessante qui è che la classe GridFSInputFile fornisce una serie di metodi per manipolare i metadati inseriti nella collezione files. Per ulteriori dettagli rimandiamo alla guida ufficiale del driver.\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView16"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/mongo_07"/>
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="match_parent"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_bold"
                        android:text="Scalabilità: lo Sharding"
                        android:textColor="#ff0092"
                        android:textSize="22sp" />
                </LinearLayout>


                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="MongoDB è noto per la sua capacità di contenere una gran mole di dati. Una delle caratteristiche più appetibili di questo DBMS è rappresentata dalla facilità con cui è possibile “scalare”, in particolare per quel che riguarda la scalabilità orizzontale. Esistono infatti due tipi di scalabilità:\n\n1)la scalabilità verticale si riferisce all’incremento delle prestazioni o delle capacità di storage di un sistema, potenziando un singolo nodo;\n\n2) la scalabilità orizzontale invece si ottiene aumentando il numero di nodi.\n\nQuindi, dal momento che MongoDB è orientato alla scalabilità orizzontale, ci stiamo fondamentalmente riferendo alla possibilità di realizzare un cluster di database MongoDB per permettere, da un lato, di aumentare le capacità di storage, dall’altro di aumentarne le prestazioni in termini di tempi di risposta. Per sharding si intende la tecnica per la creazione di un database distribuito (anche detto sharded cluster) in cui ogni nodo contiene una porzione del database.\n\nIn MongoDB per realizzare un cluster in sharding sono necessari tre componenti, almeno uno per tipo:\n "
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="horizontal">

                    <ImageView
                        android:id="@+id/imageView17"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="2dp"
                        android:layout_marginTop="5dp"
                        android:layout_marginEnd="10dp"
                        android:layout_marginRight="2dp"
                        android:layout_weight="1"
                        android:contentDescription="TODO"
                        app:srcCompat="@drawable/mongo_07"/>
                </LinearLayout>




                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:layout_width="391dp"
                        android:layout_height="0dp"
                        android:layout_marginStart="10dp"
                        android:layout_marginTop="20dp"
                        android:layout_weight="1"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="\nGrazie per l'attenzione.\n\n"
                        android:textColor="#474747"
                        android:textSize="18sp" />

                </LinearLayout>


                <androidx.constraintlayout.widget.ConstraintLayout
                    android:layout_width="match_parent"
                    android:layout_height="151dp"
                    android:layout_weight="1"
                    android:orientation="vertical">


                    <Button
                        android:id="@+id/button_quiz"
                        android:layout_width="200dp"
                        android:layout_height="40dp"
                        android:background="@drawable/button_bkg"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Tenta il quiz"
                        android:textAlignment="center"
                        android:textAllCaps="false"
                        android:textColor="#FFFFFF"
                        android:textSize="20sp"
                        app:layout_constraintBottom_toBottomOf="parent"
                        app:layout_constraintEnd_toEndOf="parent"
                        app:layout_constraintStart_toStartOf="parent"
                        app:layout_constraintTop_toTopOf="parent"
                        app:layout_constraintVertical_bias="0.01999998" />

                    <Button
                        android:id="@+id/button_home"
                        android:layout_width="200dp"
                        android:layout_height="60dp"
                        android:layout_marginTop="50dp"
                        android:layout_marginBottom="30dp"
                        android:background="@drawable/button_bkg"
                        android:fontFamily="@font/sf_ui_display_medium"
                        android:text="Torna alla pagina iniziale"
                        android:textAlignment="center"
                        android:textAllCaps="false"
                        android:textColor="#FFFFFF"
                        android:textSize="20sp"
                        app:layout_constraintBottom_toBottomOf="parent"
                        app:layout_constraintEnd_toEndOf="parent"
                        app:layout_constraintStart_toStartOf="parent"
                        app:layout_constraintTop_toTopOf="parent"
                        app:layout_constraintVertical_bias="0.85" />
                </androidx.constraintlayout.widget.ConstraintLayout>


            </LinearLayout>
        </ScrollView>

        <com.google.android.material.bottomnavigation.BottomNavigationView
            android:id="@+id/bottom_navigation"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#ffff"
            app:itemIconTint="@drawable/selector"
            app:itemTextColor="@drawable/selector"
            app:menu="@menu/menu_navigation" />


    </LinearLayout>

    <RelativeLayout
        android:layout_width="300dp"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        android:background="@android:color/white">

        <include layout="@layout/main_nav_drawer" />


    </RelativeLayout>


</androidx.drawerlayout.widget.DrawerLayout>

